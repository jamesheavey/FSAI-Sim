<?xml version="1.0"?>
<robot name="gem"
    xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Source: https://github.com/benwarrick/simple_ackermann/blob/master/ack_description/urdf/gem.xacro -->

    <!-- Vehicle Dimensions -->
    <xacro:property name="wheel_base_length" value="1.753"/>
    <xacro:property name="wheel_base_width" value="1.245"/>
    <xacro:property name="wheel_diameter" value="0.584"/>
    <xacro:property name="wheel_thickness" value="0.178"/>

    <xacro:include filename="$(find fs_description)/sensors/single_camera.urdf.xacro" />

    <!-- Macros -->
    <xacro:macro name="wheel" params="name radius width material caster_offset mass">
        <link name="${name}">
            <collision>
                <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
                <geometry>
                    <cylinder length="${width}" radius="${radius}"/>
                </geometry>
            </collision>
            <visual>
                <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
                <geometry>
                    <cylinder length="${width}" radius="${radius}"/>
                </geometry>
                <material name="black"/>
            </visual>
            <inertial>
                <origin xyz="0 0 0" rpy="0 1.5708 1.5708" />
                <mass value="0.2"/>
                <!--<cylinder_inertia m="0.2" r="0.3" h="0.1"/> -->
                <cylinder_inirtia m="${mass}" r="${radius}" h="${width}" />
                <!--<inertia ixx="0.23" ixy="0" ixz="0" iyy="0.23" iyz="0" izz="0.4"/>-->
            </inertial>
        </link>
        <gazebo reference="${name}">
            <mu1 value="2.0"/>
            <mu2 value="2.0"/>
            <kp value="10000000.0" />
            <kd value="1.0" />
            <fdir1 value="0 1 0"/>
            <material>${material}</material>
        </gazebo>
    </xacro:macro>

    <xacro:macro name="wheel_steer" params="lr lr_reflect">
        <xacro:wheel name="${lr}" radius="${wheel_diameter/2}" width="${wheel_thickness}" material="Gazebo/Blue" caster_offset="0" mass="6"/>
        <xacro:wheel name="${lr}_assembly" radius="0.1" width="0.001" material="Gazebo/White" caster_offset="-.5" mass="0.5" />

        <joint name="${lr}_hinge" type="revolute">
            <parent link="chassis"/>
            <child link="${lr}_assembly"/>
            <origin xyz="${wheel_base_length/2} ${lr_reflect*(wheel_base_width/2)} ${wheel_diameter/2}" rpy="0 0 0" />
            <axis xyz="0 0 1" rpy="0 0 0" />
            <limit effort="100" velocity="1" lower="-1" upper="1"/>
            <dynamics damping="0.0" friction="0.0"/>
        </joint>
        <joint name="${lr}_rotate" type="continuous">
            <parent link="${lr}_assembly"/>
            <child link="${lr}"/>
            <origin xyz="0.0 ${lr_reflect*(wheel_thickness/2)} 0.0" rpy="0 0 0" />
            <axis xyz="0 1 0" rpy="0 0 0" />
            <limit effort="100" velocity="50"/>
            <dynamics damping="0.0" friction="0.0"/>
        </joint>
        <transmission name="trans_${lr}_hing">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${lr}_hinge">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="motor_${lr}_front">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
        <transmission name="trans_${lr}_rotate">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${lr}_rotate">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
            </joint>
            <actuator name="motor_${lr}_rotate">
                <hardwareInterface>EffortJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>

    <xacro:macro name="rear_wheel" params="lr lr_reflect">
        <xacro:wheel name="${lr}" radius="${wheel_diameter/2}" width="${wheel_thickness}" material="Gazebo/Blue" caster_offset="0" mass="6" />

        <joint name="${lr}_rotate" type="continuous">
            <parent link="chassis"/>
            <child link="${lr}"/>
            <origin xyz="${-wheel_base_length/2} ${lr_reflect*((wheel_base_width/2)+(wheel_thickness/2))} ${wheel_diameter/2}" rpy="0 0 0" />
            <axis xyz="0 1 0" rpy="0 0 0" />
            <limit effort="0" velocity="0"/>
            <dynamics damping="0.0" friction="0.0"/>
        </joint>

    </xacro:macro>

    <!--<xacro:macro name="box_inertia" params="m x y z">
		<inertia ixx="${m*(z*z+x*x)/12}" ixy = "0" ixz = "0" iyy="${m*(y*y+x*x)/12}" iyz = "0" izz="${m*(y*y+z*z)/12}" /> 
	</xacro:macro>
  <xacro:macro name="box_inertia" params="x y z mass">
      <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0" iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0" izz="${0.0833333 * mass * (x*x + y*y)}" />
  </xacro:macro>-->
    <xacro:macro name="box_inertia" params="x y z m">
        <inertia ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0" iyy="${m*(x*x+z*z)/12}" iyz = "0" izz="${m*(x*x+z*z)/12}" />
    </xacro:macro>
    <xacro:macro name="cylinder_inirtia" params="m r h">
        <inertia ixx="${(m*((3*r*r)+(h*h)))/12}" ixy = "0" ixz = "0" iyy="${(m*((3*r*r)+(h*h)))/12}" iyz = "0" izz="${(m*r*r)/2}" />
    </xacro:macro>

    <!-- Macros End -->

    <!-- Base link -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
        </visual>
    </link>

    <!-- Chassis START-->
    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
    </joint>

    <link name="chassis">
        <collision>
            <origin xyz="0 0 ${wheel_diameter/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${wheel_base_length} ${wheel_base_width-wheel_thickness} 0.1"/>
            </geometry>
        </collision>
        <visual>
            <origin xyz="0 0 0.3" rpy="0 0 0"/>
            <geometry>
                <box size="${wheel_base_length} ${wheel_base_width-wheel_thickness} 0.1"/>
            </geometry>
            <material name="orange"/>
        </visual>
        <inertial>
            <mass value="1"/>
            <origin xyz="0 0 0.3" rpy="0 0 0"/>
            <xacro:box_inertia x="${wheel_base_length}" y="${wheel_base_width-wheel_thickness}" z=".1" m="1" />
            <!--<inertia ixx="0.4" ixy="0.1" ixz="0.1" iyy="0.4" iyz="0.1" izz="0.2"/>-->
        </inertial>
    </link>

    <gazebo reference="chassis">
        <!--Stiffness -->
        <kp>1000000.0</kp>
        <!--Dampening-->
        <kd>0.1</kd>
        <dampingFactor>0</dampingFactor>
        <material>Gazebo/White</material>
        <selfCollide>true</selfCollide>
        <turnGravityOff>false</turnGravityOff>
        <mu1 value="0.1"/>
        <mu2 value="0.1"/>
        <fdir1 value="0 0 0"/>
    </gazebo>
    <!-- Chassis END -->

    <xacro:wheel_steer lr="right_wheel" lr_reflect="-1" />
    <xacro:wheel_steer lr="left_wheel" lr_reflect="1" />
    <xacro:rear_wheel lr="right_wheel_rear" lr_reflect="-1" />
    <xacro:rear_wheel lr="left_wheel_rear" lr_reflect="1" />

    <!-- <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/ack</robotNamespace>
            <legacyModeNS>true</legacyModeNS>
        </plugin>
    </gazebo> -->

    <!-- Camera -->
    <!-- You can adjust the camera angle with the p in rpy, measured in radians. -->
    <!-- You can also increate the height of the camera by adding a number, in meters, -->
    <!-- to the z in xyz. For example, to simulate a camera mounted on a 1/2 meter post, -->
    <!-- we can replace the z value with ${wheelRadius+chassisHeight+0.5} -->
    <xacro:single_camera name="camera0">
        <origin xyz="${wheel_base_length/2} 0.1 ${(wheel_diameter/2)+0.3}" rpy="0 0.4 0.4" />
    </xacro:single_camera>
    <xacro:single_camera name="camera1">
        <origin xyz="${wheel_base_length/2} 0 ${(wheel_diameter/2)+0.3}" rpy="0 0.4 0" />
    </xacro:single_camera>
    <xacro:single_camera name="camera2">
        <origin xyz="${wheel_base_length/2} -0.1 ${(wheel_diameter/2)+0.3}" rpy="0 0.4 -0.4" />
    </xacro:single_camera>
    <xacro:single_camera name="camera_3pv">
        <origin xyz="${-wheel_base_length} 0 ${(wheel_diameter/2)+1.3}" rpy="0 0.4 0" />
    </xacro:single_camera>




    <gazebo>
        <plugin name='ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>

            <ros>
                <namespace>car</namespace>
                <remapping>cmd_vel:=cmd</remapping>
                <remapping>odom:=odom</remapping>
                <remapping>distance:=distance</remapping>
            </ros>

            <update_rate>100.0</update_rate>

            <!-- wheels -->
            <front_left_joint>left_wheel_rotate</front_left_joint>
            <front_right_joint>right_wheel_rotate</front_right_joint>
            <rear_left_joint>left_wheel_rear_rotate</rear_left_joint>
            <rear_right_joint>right_wheel_rear_rotate</rear_right_joint>
            <left_steering_joint>left_wheel_hinge</left_steering_joint>
            <right_steering_joint>right_wheel_hinge</right_steering_joint>
            <!-- <steering_wheel_joint>steering_joint</steering_wheel_joint> -->

            <!-- Max absolute steer angle for tyre in radians-->
            <!-- Any cmd_vel angular z greater than this would be capped -->
            <max_steer>0.6458</max_steer>

            <!-- Max absolute steering angle of steering wheel -->
            <max_steering_angle>7.85</max_steering_angle>

            <!-- Max absolute linear speed in m/s -->
            <max_speed>4</max_speed>

            <!-- PID tuning -->
            <left_steering_pid_gain>150 0 1</left_steering_pid_gain>
            <left_steering_i_range>0 0</left_steering_i_range>
            <right_steering_pid_gain>150 0 1</right_steering_pid_gain>
            <right_steering_i_range>0 0</right_steering_i_range>
            <linear_velocity_pid_gain>2 0 0.01</linear_velocity_pid_gain>
            <linear_velocity_i_range>0 0</linear_velocity_i_range>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
            <publish_distance>true</publish_distance>

            <odometry_frame>odom_frame</odometry_frame>
            <robot_base_frame>chassis</robot_base_frame>

        </plugin>
    </gazebo>

</robot>